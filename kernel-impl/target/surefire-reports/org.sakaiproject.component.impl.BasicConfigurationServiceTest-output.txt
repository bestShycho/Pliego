SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/alumno/.m2/repository/org/slf4j/slf4j-simple/1.7.31/slf4j-simple-1.7.31.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/alumno/.m2/repository/org/slf4j/slf4j-log4j12/1.7.30/slf4j-log4j12-1.7.30.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
[main] INFO org.sakaiproject.component.impl.BasicConfigurationServiceTest - Config items: 16 (16, 0)
  1: AZ => Aaron Zeckoski  R,N:(string [TEST] 0, 0, [])
  2: booleanVal => true  R,N:(boolean [TEST] 0, 0, [])
  3: intVal => 11  R,N:(int [TEST] 0, 0, [])
  4: longVal => 15  R,N:(int [TEST] 0, 0, [])
  5: name => Aaron  R,N:(string [TEST] 0, 0, [])
  6: test1 => test1  R,N:(string [TEST] 0, 0, [])
  7: test2 => test2  R,N:(string [TEST] 0, 0, [])
  8: test3 => test3  R,N:(string [TEST] 0, 0, [])
  9: test4 => test4  R,N:(string [TEST] 0, 0, [])
  10: test5 => test5  R,N:(string [TEST] 0, 0, [])
  11: test6 => test6  R,N:(string [TEST] 0, 0, [])
  12: test7 => ${AZ}  R,N:(string [TEST] 0, 0, [])
  13: testKeyEmpty =>   R,N:(string [TEST] 0, 0, [])
  14: testKeyInvalid => testing invalid=${invalid} testing  R,N:(string [TEST] 0, 0, [])
  15: testKeyNested => testing name=${name} testing  R,N:(string [TEST] 0, 0, [])
  16: testKeyNestedMulti => testing az=${AZ} nested=${testKeyNested} invalid=${invalid}  R,N:(string [TEST] 0, 0, [])

[main] INFO org.sakaiproject.component.impl.BasicConfigurationServiceTest - Config items: 16 (16, 0)
  1: AZ => Aaron Zeckoski  R,N:(string [TEST] 0, 0, [])
  2: booleanVal => true  R,N:(boolean [TEST] 0, 0, [])
  3: intVal => 11  R,N:(int [TEST] 0, 0, [])
  4: longVal => 15  R,N:(int [TEST] 0, 0, [])
  5: name => Aaron  R,N:(string [TEST] 0, 0, [])
  6: test1 => test1  R,N:(string [TEST] 0, 0, [])
  7: test2 => test2  R,N:(string [TEST] 0, 0, [])
  8: test3 => test3  R,N:(string [TEST] 0, 0, [])
  9: test4 => test4  R,N:(string [TEST] 0, 0, [])
  10: test5 => test5  R,N:(string [TEST] 0, 0, [])
  11: test6 => test6  R,N:(string [TEST] 0, 0, [])
  12: test7 => ${AZ}  R,N:(string [TEST] 0, 0, [])
  13: testKeyEmpty =>   R,N:(string [TEST] 0, 0, [])
  14: testKeyInvalid => testing invalid=${invalid} testing  R,N:(string [TEST] 0, 0, [])
  15: testKeyNested => testing name=${name} testing  R,N:(string [TEST] 0, 0, [])
  16: testKeyNestedMulti => testing az=${AZ} nested=${testKeyNested} invalid=${invalid}  R,N:(string [TEST] 0, 0, [])

[main] INFO org.sakaiproject.component.impl.BasicConfigurationServiceTest - Config items: 16 (16, 0)
  1: AZ => Aaron Zeckoski  R,N:(string [TEST] 0, 0, [])
  2: booleanVal => true  R,N:(boolean [TEST] 0, 0, [])
  3: intVal => 11  R,N:(int [TEST] 0, 0, [])
  4: longVal => 15  R,N:(int [TEST] 0, 0, [])
  5: name => Aaron  R,N:(string [TEST] 0, 0, [])
  6: test1 => test1  R,N:(string [TEST] 0, 0, [])
  7: test2 => test2  R,N:(string [TEST] 0, 0, [])
  8: test3 => test3  R,N:(string [TEST] 0, 0, [])
  9: test4 => test4  R,N:(string [TEST] 0, 0, [])
  10: test5 => test5  R,N:(string [TEST] 0, 0, [])
  11: test6 => test6  R,N:(string [TEST] 0, 0, [])
  12: test7 => ${AZ}  R,N:(string [TEST] 0, 0, [])
  13: testKeyEmpty =>   R,N:(string [TEST] 0, 0, [])
  14: testKeyInvalid => testing invalid=${invalid} testing  R,N:(string [TEST] 0, 0, [])
  15: testKeyNested => testing name=${name} testing  R,N:(string [TEST] 0, 0, [])
  16: testKeyNestedMulti => testing az=${AZ} nested=${testKeyNested} invalid=${invalid}  R,N:(string [TEST] 0, 0, [])

[main] INFO org.sakaiproject.component.impl.BasicConfigurationServiceTest - Config items: 16 (16, 0)
  1: AZ => Aaron Zeckoski  R,N:(string [TEST] 0, 0, [])
  2: booleanVal => true  R,N:(boolean [TEST] 0, 0, [])
  3: intVal => 11  R,N:(int [TEST] 0, 0, [])
  4: longVal => 15  R,N:(int [TEST] 0, 0, [])
  5: name => Aaron  R,N:(string [TEST] 0, 0, [])
  6: test1 => test1  R,N:(string [TEST] 0, 0, [])
  7: test2 => test2  R,N:(string [TEST] 0, 0, [])
  8: test3 => test3  R,N:(string [TEST] 0, 0, [])
  9: test4 => test4  R,N:(string [TEST] 0, 0, [])
  10: test5 => test5  R,N:(string [TEST] 0, 0, [])
  11: test6 => test6  R,N:(string [TEST] 0, 0, [])
  12: test7 => ${AZ}  R,N:(string [TEST] 0, 0, [])
  13: testKeyEmpty =>   R,N:(string [TEST] 0, 0, [])
  14: testKeyInvalid => testing invalid=${invalid} testing  R,N:(string [TEST] 0, 0, [])
  15: testKeyNested => testing name=${name} testing  R,N:(string [TEST] 0, 0, [])
  16: testKeyNestedMulti => testing az=${AZ} nested=${testKeyNested} invalid=${invalid}  R,N:(string [TEST] 0, 0, [])

[main] INFO org.sakaiproject.component.impl.BasicConfigurationServiceTest - Config items: 16 (16, 0)
  1: AZ => Aaron Zeckoski  R,N:(string [TEST] 0, 0, [])
  2: booleanVal => true  R,N:(boolean [TEST] 0, 0, [])
  3: intVal => 11  R,N:(int [TEST] 0, 0, [])
  4: longVal => 15  R,N:(int [TEST] 0, 0, [])
  5: name => Aaron  R,N:(string [TEST] 0, 0, [])
  6: test1 => test1  R,N:(string [TEST] 0, 0, [])
  7: test2 => test2  R,N:(string [TEST] 0, 0, [])
  8: test3 => test3  R,N:(string [TEST] 0, 0, [])
  9: test4 => test4  R,N:(string [TEST] 0, 0, [])
  10: test5 => test5  R,N:(string [TEST] 0, 0, [])
  11: test6 => test6  R,N:(string [TEST] 0, 0, [])
  12: test7 => ${AZ}  R,N:(string [TEST] 0, 0, [])
  13: testKeyEmpty =>   R,N:(string [TEST] 0, 0, [])
  14: testKeyInvalid => testing invalid=${invalid} testing  R,N:(string [TEST] 0, 0, [])
  15: testKeyNested => testing name=${name} testing  R,N:(string [TEST] 0, 0, [])
  16: testKeyNestedMulti => testing az=${AZ} nested=${testKeyNested} invalid=${invalid}  R,N:(string [TEST] 0, 0, [])

[main] INFO org.sakaiproject.component.impl.BasicConfigurationServiceTest - Config items: 16 (16, 0)
  1: AZ => Aaron Zeckoski  R,N:(string [TEST] 0, 0, [])
  2: booleanVal => true  R,N:(boolean [TEST] 0, 0, [])
  3: intVal => 11  R,N:(int [TEST] 0, 0, [])
  4: longVal => 15  R,N:(int [TEST] 0, 0, [])
  5: name => Aaron  R,N:(string [TEST] 0, 0, [])
  6: test1 => test1  R,N:(string [TEST] 0, 0, [])
  7: test2 => test2  R,N:(string [TEST] 0, 0, [])
  8: test3 => test3  R,N:(string [TEST] 0, 0, [])
  9: test4 => test4  R,N:(string [TEST] 0, 0, [])
  10: test5 => test5  R,N:(string [TEST] 0, 0, [])
  11: test6 => test6  R,N:(string [TEST] 0, 0, [])
  12: test7 => ${AZ}  R,N:(string [TEST] 0, 0, [])
  13: testKeyEmpty =>   R,N:(string [TEST] 0, 0, [])
  14: testKeyInvalid => testing invalid=${invalid} testing  R,N:(string [TEST] 0, 0, [])
  15: testKeyNested => testing name=${name} testing  R,N:(string [TEST] 0, 0, [])
  16: testKeyNestedMulti => testing az=${AZ} nested=${testKeyNested} invalid=${invalid}  R,N:(string [TEST] 0, 0, [])

[main] INFO org.sakaiproject.component.impl.BasicConfigurationServiceTest - Config items: 16 (16, 0)
  1: AZ => Aaron Zeckoski  R,N:(string [TEST] 0, 0, [])
  2: booleanVal => true  R,N:(boolean [TEST] 0, 0, [])
  3: intVal => 11  R,N:(int [TEST] 0, 0, [])
  4: longVal => 15  R,N:(int [TEST] 0, 0, [])
  5: name => Aaron  R,N:(string [TEST] 0, 0, [])
  6: test1 => test1  R,N:(string [TEST] 0, 0, [])
  7: test2 => test2  R,N:(string [TEST] 0, 0, [])
  8: test3 => test3  R,N:(string [TEST] 0, 0, [])
  9: test4 => test4  R,N:(string [TEST] 0, 0, [])
  10: test5 => test5  R,N:(string [TEST] 0, 0, [])
  11: test6 => test6  R,N:(string [TEST] 0, 0, [])
  12: test7 => ${AZ}  R,N:(string [TEST] 0, 0, [])
  13: testKeyEmpty =>   R,N:(string [TEST] 0, 0, [])
  14: testKeyInvalid => testing invalid=${invalid} testing  R,N:(string [TEST] 0, 0, [])
  15: testKeyNested => testing name=${name} testing  R,N:(string [TEST] 0, 0, [])
  16: testKeyNestedMulti => testing az=${AZ} nested=${testKeyNested} invalid=${invalid}  R,N:(string [TEST] 0, 0, [])

[main] INFO org.sakaiproject.component.impl.BasicConfigurationServiceTest - Config items: 16 (16, 0)
  1: AZ => Aaron Zeckoski  R,N:(string [TEST] 0, 0, [])
  2: booleanVal => true  R,N:(boolean [TEST] 0, 0, [])
  3: intVal => 11  R,N:(int [TEST] 0, 0, [])
  4: longVal => 15  R,N:(int [TEST] 0, 0, [])
  5: name => Aaron  R,N:(string [TEST] 0, 0, [])
  6: test1 => test1  R,N:(string [TEST] 0, 0, [])
  7: test2 => test2  R,N:(string [TEST] 0, 0, [])
  8: test3 => test3  R,N:(string [TEST] 0, 0, [])
  9: test4 => test4  R,N:(string [TEST] 0, 0, [])
  10: test5 => test5  R,N:(string [TEST] 0, 0, [])
  11: test6 => test6  R,N:(string [TEST] 0, 0, [])
  12: test7 => ${AZ}  R,N:(string [TEST] 0, 0, [])
  13: testKeyEmpty =>   R,N:(string [TEST] 0, 0, [])
  14: testKeyInvalid => testing invalid=${invalid} testing  R,N:(string [TEST] 0, 0, [])
  15: testKeyNested => testing name=${name} testing  R,N:(string [TEST] 0, 0, [])
  16: testKeyNestedMulti => testing az=${AZ} nested=${testKeyNested} invalid=${invalid}  R,N:(string [TEST] 0, 0, [])

